import java.util.*;

public class Main {
    private static final ArrayList<StringIntPair> letters = new ArrayList<>();
    static {
        letters.add(new StringIntPair("I", 1));
        letters.add(new StringIntPair("IV", 4));
        letters.add(new StringIntPair("V", 5));
        letters.add(new StringIntPair("IX", 9));
        letters.add(new StringIntPair("X", 10));
        letters.add(new StringIntPair("XL", 40));
        letters.add(new StringIntPair("L", 50));
        letters.add(new StringIntPair("XC", 90));
        letters.add(new StringIntPair("C", 100));
        Collections.reverse(letters);
    }

    static class StringIntPair{
        private final String first;
        private final int second;
        public StringIntPair(String first, int second){
            this.first = first;
            this.second = second;
        }
        public String getFirst() {
            return first;
        }

        public int getSecond() {
            return second;
        }
    }

    static class IntIntPair{
        private final int first;
        private final int second;
        private IntIntPair(int first, int second){
            this.first = first;
            this.second = second;
        }
        public static IntIntPair getOperands(String[] arr) throws Exception{
            if (arr.length > 2)
                throw new Exception("формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");
            if (arr.length < 2)
                return null;
            int n1;
            int n2;
            try {
                n1 = Integer.parseInt(arr[0]);
                n2 = Integer.parseInt(arr[1]);
            }
            catch (Exception e){
                throw new Exception("т.к. строка не является математической операцией"); }
            if (n1 > 10 || n1 < 1 || n2 > 10 || n2 < 1)
                throw new Exception("Значение не в необходимом диапазоне [1; 10]");
            return new IntIntPair(n1, n2);
        }

        public int getFirst() {
            return first;
        }

        public int getSecond() {
            return second;
        }
    }

    public static void main(String[] args) throws Exception{
        Scanner in = new Scanner(System.in);
        String query = in.nextLine();
        boolean isRoman = query.contains("I") || query.contains("V") || query.contains("X");
        if (query.contains("0") || query.contains("1") || query.contains("2") || query.contains("3") || query.contains("4") || query.contains("5") || query.contains("6") || query.contains("7") || query.contains("8") || query.contains("9"))
            if (isRoman)
                throw new Exception("используются одновременно разные системы счисления");
        query = query.replaceAll(" ", "");
        if (isRoman) {
            query = toNormal(query);
        }
        int answer = -1000;
        IntIntPair pair;
        pair = IntIntPair.getOperands(query.split("\\*"));
        if (pair != null)
            answer = pair.getFirst() * pair.getSecond();
        pair = IntIntPair.getOperands(query.split("/"));
        if (pair != null)
            answer = pair.getFirst() / pair.getSecond();
        pair = IntIntPair.getOperands(query.split("\\+"));
        if (pair != null)
            answer = pair.getFirst() + pair.getSecond();
        pair = IntIntPair.getOperands(query.split("-"));
        if (pair != null)
            answer = pair.getFirst() - pair.getSecond();
        if (answer == -1000)
            throw new Exception("т.к. строка не является математической операцией");
        if (isRoman)
            System.out.println(toRoman(answer));
        else
            System.out.println(answer);
    }
    public static String toRoman(int val) throws Exception{
        if (val <= 0)
            throw new Exception("в римской системе нет отрицательных чисел и 0");
        StringBuilder sb = new StringBuilder();
        for(StringIntPair i : letters) {
            while(val >= i.getSecond()) {
                sb.append(i.getFirst());
                val -= i.getSecond();
            }
        }
        return sb.toString();
    }

    static String toNormal(String query){
        query = query.replaceAll("VIII", "8");
        query = query.replaceAll("III", "3");
        query = query.replaceAll("VII", "7");
        query = query.replaceAll("II", "2");
        query = query.replaceAll("IV", "4");
        query = query.replaceAll("VI", "6");
        query = query.replaceAll("IX", "9");
        query = query.replaceAll("X", "10");
        query = query.replaceAll("V", "5");
        query = query.replaceAll("I", "1");
        return query;
    }

}
